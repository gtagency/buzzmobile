#!/bin/bash

# Safe apt-get that waits until all other instances
# of apt-get have completed (and released the lock)
# before executing. This is to prevent the script
# from failing due to a dpkg database lock.
#
# Takes the same arguments as apt-get
safe-apt-get() {
    i=0
    tput sc
    
    # Wait while the dpkg lock is set
    while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
        case $(($i % 4)) in
            0 ) j="-" ;;
            1 ) j="\\" ;;
            2 ) j="|" ;;
            3 ) j="/" ;;
        esac
        tput rc
        echo -en "\r[$j] Waiting for other software managers to finish..." 
        sleep 0.5
        ((i=i+1))
    done 

    sudo apt-get "$@"
}

# Makes this script exit on first error.
set -e

# need this to create venv if python was installed without the entire stdlib
safe-apt-get -y install python3.4-venv

# need this to be able to install ds4drv
safe-apt-get -y install python3-dev

# create a python3 virtualenvironment in the buzzmobile directory
# yes, venv will allow you to create a virtualenv in any directory
#python3 -m venv .
python3 -m venv --copies .

# activate the virtualenv we just created
source bin/activate

# default pip version in a venv is 1.5.4, we want to upgrade to a newer version
# that supports anylinux wheels, specifically this is for OpenCV and
# tensorflow, which cannot be installed via a setup.py, and so we manually
# install them here through their .whl files
pip install --upgrade pip

# before we install those though, we need to install buzzmobile, as it installs
# some ROS dependencies, as well as numpy, needed for tf and opencv
pip install -e buzzmobile

# it might be worth trying to get these to install from inside of the
# buzzmobile setup.py, but that would require dark trickery.
pip install opencv-python==3.1.0.3

# Unfortunately, tensorflow isn't availible on pypi, so we have to pull it from this very readable link
pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp34-cp34m-linux_x86_64.whl

# Make sure ROS is installed, do some initialization
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116
safe-apt-get update -qq
safe-apt-get install -y python-catkin-pkg python-rosdep ros-indigo-catkin ros-indigo-ros ros-indigo-roslaunch build-essential python3-tk
safe-apt-get install -y psmisc

sudo rosdep init # This can only be run once. Possible enhancement, check this
rosdep update

# Build our project and install rosdeps
cd ~/catkin_ws/src
source /opt/ros/indigo/setup.bash
catkin_init_workspace # This can only be run once. Possible enhancement, check this
rosdep install -y --from-paths . --ignore-src --rosdistro=indigo
cd ~/catkin_ws
catkin_make -j2 # Actually build
source ~/catkin_ws/devel/setup.bash

# Set up environment variables
echo "alias rosinit='source /opt/ros/indigo/setup.bash'" >> ~/.bashrc
echo "alias rosdevel='source ~/catkin_ws/devel/setup.bash' # needed for autocompletion" >> ~/.bashrc
echo "alias rosvenv='source ~/catkin_ws/src/buzzmobile/bin/activate' # activate venv" >> ~/.bashrc
echo "rosinit     # put these in your .bashrc too so they run everytime" >> ~/.bashrc
echo "rosdevel    # you open a new terminal window/tab." >> ~/.bashrc
